# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import arena_pb2 as arena__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in arena_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ArenaBattleServiceStub(object):
    """Arena Battle Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterBot = channel.unary_unary(
                '/arena.ArenaBattleService/RegisterBot',
                request_serializer=arena__pb2.BotRegistration.SerializeToString,
                response_deserializer=arena__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.PlayGame = channel.stream_stream(
                '/arena.ArenaBattleService/PlayGame',
                request_serializer=arena__pb2.Action.SerializeToString,
                response_deserializer=arena__pb2.Observation.FromString,
                _registered_method=True)
        self.SendEvent = channel.unary_unary(
                '/arena.ArenaBattleService/SendEvent',
                request_serializer=arena__pb2.GameEvent.SerializeToString,
                response_deserializer=arena__pb2.GameEvent.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/arena.ArenaBattleService/GetStats',
                request_serializer=arena__pb2.BotRegistration.SerializeToString,
                response_deserializer=arena__pb2.GameStats.FromString,
                _registered_method=True)


class ArenaBattleServiceServicer(object):
    """Arena Battle Service
    """

    def RegisterBot(self, request, context):
        """Bot registration and connection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayGame(self, request_iterator, context):
        """Main game loop - bidirectional streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEvent(self, request, context):
        """Event notification
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get game statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArenaBattleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterBot': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterBot,
                    request_deserializer=arena__pb2.BotRegistration.FromString,
                    response_serializer=arena__pb2.RegistrationResponse.SerializeToString,
            ),
            'PlayGame': grpc.stream_stream_rpc_method_handler(
                    servicer.PlayGame,
                    request_deserializer=arena__pb2.Action.FromString,
                    response_serializer=arena__pb2.Observation.SerializeToString,
            ),
            'SendEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEvent,
                    request_deserializer=arena__pb2.GameEvent.FromString,
                    response_serializer=arena__pb2.GameEvent.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=arena__pb2.BotRegistration.FromString,
                    response_serializer=arena__pb2.GameStats.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'arena.ArenaBattleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('arena.ArenaBattleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ArenaBattleService(object):
    """Arena Battle Service
    """

    @staticmethod
    def RegisterBot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arena.ArenaBattleService/RegisterBot',
            arena__pb2.BotRegistration.SerializeToString,
            arena__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlayGame(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/arena.ArenaBattleService/PlayGame',
            arena__pb2.Action.SerializeToString,
            arena__pb2.Observation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arena.ArenaBattleService/SendEvent',
            arena__pb2.GameEvent.SerializeToString,
            arena__pb2.GameEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/arena.ArenaBattleService/GetStats',
            arena__pb2.BotRegistration.SerializeToString,
            arena__pb2.GameStats.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
